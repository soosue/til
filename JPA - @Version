JPA에는 엔티티의 버전을 관리해주는 기능이 있다.

엔티티에 버전관리용 필드를 하나 추가하고 @Version을 붙이면 된다.
그러면 엔티티가 수정될 때 마다 버전이 하나씩 자동으로 증가한다.
그리고 낙관적 락이 자동으로 적용된다.

- @Version 사용법
@Version을 사용할 수 있는 필드의 타입은 org.hibernate.type.VersionType의 구현체를 보면 확인할 수 있다.
기본적으로는 아래와 같이 사용한다

    @Version
    private Integer version;

    @Version
    private Long version;

    @Version
    private Short version;

    @Version
    private LocalDateTime version;

    @Version
    private Timestamp version;
    
숫자값은 0부터 1씩 증가되고, 시간값은 수정된 시간이 버전이 된다.

- 버전 증가 방식
@Version이 있는 엔티티를 수정하면, 영속성 컨텍스트를 flush 할 때, update쿼리에 set version = ?, where ... and version = ?가 추가된다.
그러므로 따로 version을 증가시켜주면 안된다.(단, 벌크 연산은 강제로 증가 시켜주어야 한다.)

- @Version의 낙관적 락
@Version을 사용하면 자동으로 낙관적 락(None)이 적용이 된다.
어떤 효과가 있냐면, 엔티티를 수정하고 플러시 할 때, 데이터베이스의 버전 값이 현재 버전이 아니면 예외가 발생한다.
동시에 수정 요청이 있었을 때, 선빵필승이 되며, 연이은 갱신으로 인한 첫번째 데이터 분실 문제를 예방한다.

참고) 1대다 연관관계에서 다를 수정한다고 1의 version이 증가하진 않는다. (값타입과, 값타입컬렉션은 증가한다.)


결론
@Version을 이용하면 엔티티가 수정될 때, 버전을 증가시킬 수 있다.
기본적으로 낙관적 락을 사용하게 되며(동시 수정요청에 대해 선빵필승), 락옵션에 따라 달라질 수 있다.
