[참고] https://docs.spring.io/spring-security/site/docs/5.2.11.RELEASE/reference/html/overall-architecture.html  
https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/core/userdetails/UserDetails.html

## Spring Security 핵심 구성요소

### SecurityContextHolder, SecurityContext and Authentication Objects

시큐리티 컨텍스트 홀더는 현재 시큐리티 컨텍스트를 담는곳이며, 앱을 이용하고 있는 주체에 대한 정보도 포함하고 있다.  
스레드 로컬을 이용해서 동일 스레드 어디에서든 꺼내 쓸 수 있으며, 다 사용하고 초기화 하는 부분을 주의해야 하지만, 스프링 시큐리티가 알아서 해주니 걱정 안해도 된다.

### Obtaining information about the current user

스프링 시큐리티는 현재 앱을 이용하고 있는 주체에 대한 정보를 나타내기 위해 Authentication객체를 이용하고, 이게 시큐리티 컨텍스트 홀더에 저장되어 있다.  
그리고 Authentication 안에는 주체로서 UserDetails가 저장되어 있다.

### The UserDetailsService

인증에 성공하면, `UserDetails loadUserByUsername(String username) throws UsernameNotFoundException;`를 이용하여 UserDetails를 반환해서 Authentication객체를 만들고, 시큐리티 컨텍스트 홀더에 저장한다.  
`InMemoryDaoImpl`나 `JdbcDaoImpl` 같은 여러 구현체가 존재한다.

주의해야할 점은, UserDetailsService는 인증을 하는 곳이 아니라는 점이다. 인증 성공하면 UserDetails를 만들기 위해 호출되는 서비스이다.

### GrantedAuthority

UserDetails는 getAuthorities()메서드도 가지고 있다. 이것은 해당 주체가 가지고 있는 권한들이다.  
web, method, domain에 관한 접근제어를 하는데 사용된다.
