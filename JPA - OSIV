Open Session In View

여기서 session은 영속성 컨텍스트(엔티티 매니저)를 의미한다.
따라서 OSIV는 영속성 컨텍스트를 View까지 열어둔다는 의미가 된다.
영속성 컨텍스트가 살아있다면, 엔티티가 영속화 된 상태로 유지가 되고, Lazy Loading을 할 수 있게 된다.

*OSIV는 View까지 영속성 컨텍스트가 살아있어서 Lazy Loading을 할 수 있게 해주는 기술이다.


과거 OSIV가 문제가 있었고, 따라서 현재 OSIV(spring)에서는 개선이 된 상황이다.

과거 OSIV는 요청 당 트랜잭션 방식이었다.
1. 요청이 하나 들어오면 서블릿 필터나 스프링 인터셉터에서 영속성 컨텍스트를 만들면서 트랜잭션을 시작하고,
2. 요청이 끝날 때 트랜잭션과 영속성 컨텍스트를 함께 종료했다.

이 방식의 문제점은 View에서 엔티티를 변경하면
요청이 끝날 때 트랜잭션이 커밋되면서, 영속성 컨텍스트가 플러시 되고, 엔티티 변경사항이 DB에 반영된다는 점이다.

현재 OSIV는 이런 방식을 보완했고, 비즈니스 계층에서만 트랜잭션을 유지하도록 한다. (스프링)
1. 영속성 컨텍스트는 서블릿 필터, 스프링 인터셉터에서 생성이 되지만, 트랜잭션은 생성되지 않는다.
2. 비즈니스 로직에서 트랜잭션이 생성되고 소멸된다.(영속성 컨텍스트 플러시)
3. 뷰에서는 영속성 컨텍스트만 존재하고, Lazy Loading만 가능해진다.
4. 영속성 컨텍스트가 종료된다.

이런 방식을 취함으로써, View에서의 엔티티 변경이 DB에 반영되지 않게 할 수 있다.
*참고, View에서 엔티티를 변경하고 비즈니스 로직을 다시 호출하게 되면, 트랜잭션이 생성되고 커밋될 때 이전 엔티티의 변경이 DB에 반영되게 된다.
(트랜잭션이 같은 영속성 컨텍스트를 공유하는 상황이라서 발생하는 문제 - OSIV에서 롤백 시에 영속성 컨텍스트는 그대로 존재하므로, 꼭 clear를 해주어야한다.)


참고)
spring web에서 기본적으로 활성화되어 있으며
spring.jpa.open-in-view: false로 비활성화할 수 있다.

번외)
jpa에서 커넥션 획득 시점은 트랜잭션이 시작될 때, 영속성 컨텍스트에서 커넥션을 획득한다.
커넥션 반납시점은 OSIV 사용 여부에 따라 달라지는데,
사용하는 경우, 트랜잭션 종료가 아닌 영속성 컨텍스트 종료시에 반납을 하고
안 하는 경우, 트랜잭션이 종료되면서 반납한다.
문제는 사용하는 경우에 커넥션 리소스를 너무 오래 가지고 있게 된다.


정리)
OSIV를 이용하면, View에서 Lazy Loading을 할 수 있게 된다.
하지만 커넥션 리소스 사용시간이 길어지는 치명적인 단점이 생긴다.
커넥션이 중요한 서비스에서는 OSIV를 끄고, 중요하지 않은 관리자 서비스에서는 켜도록 하자.
OSIV를 껐을 때 강제로 Lazy Loading을 호출해주어야 하는 부분에 대해서는 Controller와 Service 사이에 QueryService를 하나 두어서 해결할 수 있다.
