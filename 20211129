tdd 익숙해지는 방법
1. 구현해야할 기능들을 최대한 잘게 쪼갠다.(제일 중요함. 최대한 기능을 작게 가져야 함)
2. 기능 목록들을 책임을 기반으로 도메인 설계를 간단하게 해서 큰 그림을 한 번 잡는다.
3. 테스트 코드를 작성하기 쉬운 기능 먼저 테스트 코드를 작성한다.
4. 테스트를 통과하는 코드를 작성한다.

객체에서 값을 가져와서 일을 수행하는 것이 아니라, 객체에게 일을 시킨다.
ex) 로또 구매 정보(구매 장수, 살 로또 번호)를 가지고 있는 객체로부터 값을 가져와서 lottoShop에게 로또 구매를 시키는 것이 아니라, 로또 구매 정보를 가지고 있는 객체에게 구매를 시킨다.
lottoShop.buyLotto(buyInfo.getBuyCount(), buyInfo.getLottoNumbers()) x
buyInfo.buyLotto(); o

책임주도설계-정보전문가패턴
- 책임은 해당 정보를 가장 많이 알고 있는 객체가 수행하게 한다. (buyInfo가 buy하도록)

원시값을 포장, 일급 컬렉션 또한 객체에게 메시지를 보내기 위한 방법 중 하나이다.
- 원시값을 포장하는 경우. 해당 객체를 계속 생성하게 될 수도 있다.(캐싱 이용 가능 -> 정적팩토리 메서드)

생성자 대신 정적팩토리 메서드 사용의 장점
- 메서드에 이름을 붙여서 객체 생성하는데, 다른 개발자들도 의미를 쉽게 파악하게 할 수 있다.
- 캐싱을 이용할 수 있게 된다.
- 같은 시그니처여도 반환 타입을 다르게 줄 수 있게 된다.

단점
- 생성 역할을 하는 정적팩토리 메서드가 있는지 찾아봐야한다.
- 정적팩토리 메서드를 사용하면 생성자는 private가 되니, 해당 클래스를 상속하는 하위 클래스는 만들 수가 없게 된다.
