tdd를 통해 도메인을 구현할 때 생각해야하는 것.
- 가장 작은 단위의 객체가 어떤 녀석인지 찾는 것이 중요함.
- A객체를 tdd로 구현했을 때 잘 안되면, A를 더 잘게 쪼갠 B를 tdd로 구현하고, 또 잘 안된다면 B를 잘게 쪼갠 C를 tdd로 구현한다.
- 계속 다시 시작하더라도, 도메인 지식은 쌓이게 된다.

책임주도설계 = 인터페이스기반 설계
- 메시지 중심으로 생각하는 설계다.
- tdd에 먼저 익숙해지고, 연습하면 좋다.
- 주의할 점. Cyclic Dependency를 가지면 안된다. Spring DI 컨테이너의 팩토리빈 역할을 하는 중간 단계 클래스를 놓도록 하자.
- sonarqube와 같은 정적분석도구를 활용하면 Cyclic Dependency를 감지할 수 있다.
